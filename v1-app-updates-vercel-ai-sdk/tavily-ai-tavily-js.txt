Directory structure:
└── tavily-ai-tavily-js/
    ├── README.md
    ├── LICENSE
    ├── package.json
    ├── tsconfig.json
    ├── tsup.config.ts
    ├── .npmignore
    └── src/
        ├── client.ts
        ├── extract.ts
        ├── index.ts
        ├── search.ts
        ├── types.ts
        └── utils.ts

================================================
File: README.md
================================================
# Tavily JavaScript SDK

Tavily's JavaScript SDK allows for easy interaction with the Tavily API, offering the full range of our search and extract functionalities directly from your JavaScript and TypeScript programs. Easily integrate smart search and content extraction capabilities into your applications, harnessing the powerful Tavily Search and Tavily Extract APIs.

## Installing
```bash
npm i @tavily/core
```

# Tavily Search
Connect your LLM to the web using the Tavily Search API. Tavily Search is a powerful search engine tailored for use by LLMs in agentic applications.

## Usage
Below is a simple code snippet that shows you how to use Tavily Search. The different steps and components of this code are explained in more detail on the JavaScript [API Reference](https://docs.tavily.com/sdk/get-started/javascript) page.

```javascript
const { tavily } = require("@tavily/core");

// Step 1. Instantiating your Tavily client
const tvly = tavily({ apiKey: "tvly-YOUR_API_KEY" });

// Step 2. Executing a simple search query
const response = await tvly.search("Who is Leo Messi?");

// Step 3. That's it! You've done a Tavily Search!
console.log(response);
```

> To learn more about the different parameters, head to our [JavaScript API Reference](https://docs.tavily.com/sdk/reference/javascript).


# Tavily Extract

The Tavily Extract API allows you to effortlessly retrieve raw content from a list of websites, making it ideal for data collection, content analysis, and research. You can also combine Tavily Extract with our Search method: first, obtain a list of relevant documents, then perform further processing on selected links to gather additional information and use it as context for your research tasks.

## Usage
Below is a simple code snippet demonstrating how to use Tavily Extract. The different steps and components of this code are explained in more detail on the JavaScript [API Reference](https://docs.tavily.com/docs/javascript-sdk/tavily-extract/api-reference) page.

```javascript
const { tavily } = require("@tavily/core");

// Step 1. Instantiating your TavilyClient
const tvly = tavily({ apiKey: "tvly-YOUR_API_KEY" });

// Step 2. Defining the list of URLs to extract content from
const urls = [
    "https://en.wikipedia.org/wiki/Artificial_intelligence",
    "https://en.wikipedia.org/wiki/Machine_learning",
    "https://en.wikipedia.org/wiki/Data_science",
    "https://en.wikipedia.org/wiki/Quantum_computing",
    "https://en.wikipedia.org/wiki/Climate_change"
] // You can provide up to 20 URLs simultaneously

// Step 3. Executing the extract request
response = await tvly.extract(urls)

// Step 4. Printing the extracted raw content
for (let result of response.results) {
    console.log(`URL: ${result['url']}`)
    console.log(`Raw Content: ${result['raw_content']}\n`)
}
// Note that URLs that could not be extracted will be stored in response.failedResults
```

> To learn more about the different parameters, head to our [JavaScript API Reference](https://docs.tavily.com/sdk/reference/javascript).

## Cost
Head to the [API Credits Overview](https://docs.tavily.com/guides/api-credits) in our documentation to learn more about how many API Credits each request costs.

## License

This project is licensed under the terms of the MIT license.

## Contact

If you are encountering issues while using Tavily, please email us at [support@tavily.com](mailto:support@tavily.com). We'll be happy to help you.

If you want to stay updated on the latest Tavily news and releases, head to our [Developer Community](https://community.tavily.com) to learn more!

================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2024 Alpha AI Technologies Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: package.json
================================================
{
  "name": "@tavily/core",
  "version": "0.3.1",
  "description": "Official JavaScript library for Tavily.",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "exports": {
    ".": {
      "import": "./dist/index.mjs",
      "require": "./dist/index.js"
    }
  },
  "homepage": "https://tavily.com",
  "repository": {
    "type": "git",
    "url": "https://github.com/tavily-ai/tavily-js.git"
  },
  "scripts": {
    "build": "tsup"
  },
  "keywords": [
    "llm",
    "ai",
    "machine learning",
    "ml",
    "embeddings",
    "vectorstores",
    "tavily"
  ],
  "author": "Tavily",
  "license": "MIT",
  "devDependencies": {
    "@types/node": "^22.7.4",
    "tsup": "^8.3.6",
    "typescript": "^5.6.2"
  },
  "dependencies": {
    "axios": "^1.7.7",
    "js-tiktoken": "^1.0.14"
  }
}


================================================
File: tsconfig.json
================================================
{
    "compilerOptions": {
        "outDir": "./dist/",
        "rootDir": "./src/",
        "module": "commonjs",
        "target": "ES6",
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true
    },
    "include": ["src"],
    "exclude": ["node_modules"]
}

================================================
File: tsup.config.ts
================================================
import { defineConfig } from "tsup";

export default defineConfig({
  entryPoints: ["./src/index.ts"],
  format: ["cjs", "esm"],
  dts: true,
  sourcemap: true,
  clean: true
});


================================================
File: .npmignore
================================================
/src
/node_modules
/test

.DS_Store
.env

tsconfig.json
tsup.config.ts


================================================
File: src/client.ts
================================================
import { TavilyClientOptions, TavilyClient } from "./types";
import { _search, _searchQNA, _searchContext } from "./search";
import { _extract } from "./extract";

export function tavily(options?: TavilyClientOptions): TavilyClient {
  const apiKey = options?.apiKey || process.env.TAVILY_API_KEY;
  if (!apiKey) {
    throw new Error("No API key provided");
  }

  return {
    search: _search(apiKey),
    extract: _extract(apiKey),
    searchQNA: _searchQNA(apiKey),
    searchContext: _searchContext(apiKey)
  };
}


================================================
File: src/extract.ts
================================================
import { TavilyExtractOptions, TavilyExtractFunction } from "./types";
import { post } from "./utils";

export function _extract(apiKey: string): TavilyExtractFunction {
  return async function extract(
    urls: Array<string>,
    options: TavilyExtractOptions = {
      includeImages: false,
      extractDepth: "basic",
    }
  ) {

    const {
      includeImages,
      extractDepth,
      ...kwargs
    } = options;

    const response = await post("extract", {
      urls,
      include_images: includeImages,
      extract_depth: extractDepth,
      ...kwargs
    }, apiKey);

    return {
      responseTime: response.data.response_time,
      results: response.data.results.map((result: any) => {
        return {
          url: result.url,
          rawContent: result.raw_content,
          images: result.images
        };
      }),
      failedResults: response.data.failed_results.map((result: any) => {
        return {
          url: result.url,
          error: result.error,
        };
      }),
    };
  };
}


================================================
File: src/index.ts
================================================
export * from './client';
export * from './types';

================================================
File: src/search.ts
================================================
import { TavilySearchOptions, TavilySearchFuncton, TavilyQNASearchFuncton, TavilyContextSearchFuncton} from "./types";
import { post, DEFAULT_MAX_TOKENS, getMaxTokensFromList } from "./utils";



export function _search(apiKey: string): TavilySearchFuncton {
  return async function search(
    query: string,
    options: TavilySearchOptions = {
      searchDepth: "basic",
      topic: "general",
      days: 3,
      maxResults: 5,
      includeImages: false,
      includeImageDescriptions: false,
      includeAnswer: false,
      includeRawContent: false,
      includeDomains: undefined,
      excludeDomains: undefined,
      maxTokens: undefined,
      timeRange: undefined
    }
  ) {

    const {
      searchDepth,
      topic,
      days,
      maxResults,
      includeImages,
      includeImageDescriptions,
      includeAnswer,
      includeRawContent,
      includeDomains,
      excludeDomains,
      timeRange,
      ...kwargs
    } = options;

    const response = await post("search", {
      query,
      search_depth: searchDepth,
      topic: topic,
      days: days,
      max_results: maxResults,
      include_images: includeImages,
      include_image_descriptions: includeImageDescriptions,
      include_answer: includeAnswer,
      include_raw_content: includeRawContent,
      include_domains: includeDomains,
      exclude_domains: excludeDomains,
      time_range: timeRange,
      ...kwargs
    }, apiKey);

    return {
      query,
      responseTime: response.data.response_time,
      images: response.data.images.map((image: any) => {
        return {
          url: image?.url || image,
          description: image.description,
        };
      }),
      results: response.data.results.map((result: any) => {
        return {
          title: result.title,
          url: result.url,
          content: result.content,
          rawContent: result.raw_content,
          score: result.score,
          publishedDate: result.published_date,
        };
      }),
      answer: response.data.answer
    };
  };
}

export function _searchQNA(apiKey: string):  TavilyQNASearchFuncton {
  return async function searchQNA(
    query: string,
    options: TavilySearchOptions = {
      searchDepth: "advanced",
      topic: "general",
      days: 3,
      maxResults: 5,
      includeImages: false,
      includeImageDescriptions: false,
      includeAnswer: false,
      includeRawContent: false,
      includeDomains: undefined,
      excludeDomains: undefined,
      maxTokens: undefined
    }
  ) {
    const response = await post("search", {
      query,
      search_depth: options.searchDepth,
      topic: options.topic,
      days: options.days,
      max_results: options.maxResults,
      include_images: false,
      include_image_descriptions: false,
      include_answer: true,
      include_raw_content: false,
      include_domains: options.includeDomains,
      exclude_domains: options.excludeDomains,
    }, apiKey);

    const answer = response.data.answer;

    return answer;
  };
}

export function _searchContext(apiKey: string): TavilyContextSearchFuncton {
  return async function searchContext(
    query: string,
    options: TavilySearchOptions = {
      searchDepth: "basic",
      topic: "general",
      days: 3,
      maxResults: 5,
      includeImages: false,
      includeImageDescriptions: false,
      includeAnswer: false,
      includeRawContent: false,
      includeDomains: undefined,
      excludeDomains: undefined,
      maxTokens: DEFAULT_MAX_TOKENS
    }
  ) {
    const response = await post("search", {
      query,
      search_depth: options.searchDepth,
      topic: options.topic,
      days: options.days,
      max_results: options.maxResults,
      include_images: false,
      include_image_descriptions: false,
      include_answer: false,
      include_raw_content: false,
      include_domains: options.includeDomains,
      exclude_domains: options.excludeDomains,
      max_tokens: options.maxTokens
    }, apiKey);

    const sources = response.data?.results || [];

    const context = sources.map((source: any) => {
      return {
        url: source.url,
        content: source.content
      }
    });

    return JSON.stringify(getMaxTokensFromList(context, options.maxTokens));

  };
}

================================================
File: src/types.ts
================================================
export type TavilySearchFuncton = (query: string, options: TavilySearchOptions) => Promise<TavilySearchResponse>;

export type TavilyQNASearchFuncton = (query: string, options: TavilySearchOptions) => Promise<string>;

export type TavilyContextSearchFuncton = (query: string, options: TavilySearchOptions) => Promise<string>;

export type TavilyExtractFunction = (urls: Array<string>, options: TavilyExtractOptions) => Promise<TavilyExtractResponse>;

export type TavilyClient = {
  search: TavilySearchFuncton;
  searchQNA: TavilyQNASearchFuncton;
  searchContext: TavilyContextSearchFuncton;
  extract: TavilyExtractFunction;
};

export type TavilyClientOptions = {
  apiKey?: string;
};

export type TavilySearchOptions = {
  searchDepth?: "basic" | "advanced";
  topic?: "general" | "news" | "finance";
  days?: number;
  maxResults?: number;
  includeImages?: boolean;
  includeImageDescriptions?: boolean;
  includeAnswer?: boolean;
  includeRawContent?: boolean;
  includeDomains?: undefined | Array<string>;
  excludeDomains?: undefined | Array<string>;
  maxTokens?: undefined | number;
  timeRange?: "year" | "month" | "week" | "day" | "y" | "m" | "w" | "d";
  [key: string]: any;
};

type TavilyImage = {
  url: string;
  description?: string;
};

type TavilySearchResult = {
  title: string;
  url: string;
  content: string;
  rawContent?: string;
  score: number;
  publishedDate: string;
};

export type TavilySearchResponse = {
  answer?: string;
  query: string;
  responseTime: number;
  images: Array<TavilyImage>;
  results: Array<TavilySearchResult>;
};

export type TavilyExtractOptions = {
  includeImages?: boolean;
  extractDepth?: "basic" | "advanced";
  [key: string]: any;
}

type TavilyExtractResult = {
  url: string;
  rawContent: string;
  images?: Array<string>;
};

type TavilyExtractFailedResult = {
  url: string;
  error: string;
};

export type TavilyExtractResponse = {
  results: Array<TavilyExtractResult>;
  failedResults: Array<TavilyExtractFailedResult>;
  responseTime: number;
};

================================================
File: src/utils.ts
================================================
import axios, { AxiosResponse } from "axios";
import { encodingForModel, TiktokenModel } from "js-tiktoken";

const BASE_URL = "https://api.tavily.com";
const DEFAULT_MODEL_ENCODING = "gpt-3.5-turbo";
export const DEFAULT_MAX_TOKENS = 4000;

export async function post(
  endpoint: string,
  body: any,
  apiKey: string
): Promise<AxiosResponse> {
  const url = `${BASE_URL}/${endpoint}`;
  const headers = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${apiKey}`
  };
  return axios.post(url, body, { headers });
}

function getTotalTokensFromString(
  str: string,
  encodingName: TiktokenModel = DEFAULT_MODEL_ENCODING
) {
  const encoding = encodingForModel(encodingName);
  return encoding.encode(str).length;
}

export function getMaxTokensFromList(
  data: Array<any>,
  maxTokens: number = DEFAULT_MAX_TOKENS
): string {
  var result = [];
  let currentTokens = 0;
  for (let item of data) {
    let itemString = JSON.stringify(item);
    let newTotalTokens = currentTokens + getTotalTokensFromString(itemString);
    if (newTotalTokens > maxTokens) {
      break;
    }
    result.push(item);
    currentTokens = newTotalTokens;
  }
  return JSON.stringify(result);
}


